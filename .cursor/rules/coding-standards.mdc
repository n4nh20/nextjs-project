---
description: 
globs: 
alwaysApply: false
---
# Coding Standards

## TypeScript Guidelines

- Always use proper TypeScript types
- Avoid using `any` type when possible
- Define interfaces for component props
- Use type inference where appropriate

Example:
```tsx
// Good
interface ButtonProps {
  text: string;
  onClick: () => void;
  variant?: 'primary' | 'secondary';
}

// Good - using type inference
const handleClick = () => {
  console.log('Clicked');
};
```

## React Component Guidelines

- Use functional components with hooks
- Prefer destructuring props
- Use early returns for conditional rendering
- Keep components focused on a single responsibility

Example:
```tsx
// Preferred component pattern
const Button = ({ text, onClick, variant = 'primary' }: ButtonProps) => {
  // Early return pattern
  if (!text) return null;
  
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' || e.key === ' ') {
      onClick();
    }
  };
  
  return (
    <button 
      onClick={onClick}
      onKeyDown={handleKeyDown}
      className={`btn btn-${variant}`}
      tabIndex={0}
      aria-label={text}
    >
      {text}
    </button>
  );
};
```

## TailwindCSS Guidelines

- Use Tailwind classes for styling
- Group related Tailwind classes logically
- Extract common patterns to component classes in globals.css
- Use responsive classes appropriately

Example:
```tsx
// Good organization of Tailwind classes
<div className="
  flex items-center justify-between 
  p-4 md:p-6 
  bg-white dark:bg-gray-800
  rounded-lg shadow-sm
">
  Content here
</div>
```
