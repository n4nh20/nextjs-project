---
description: 
globs: 
alwaysApply: false
---
# MongoDB and API Guidelines

## MongoDB Integration

- Use MongoDB with Mongoose for schema validation
- Place MongoDB models in the `models` directory
- Create a connection utility in `lib/mongodb.ts`
- Implement proper error handling for database operations

Example model:
```ts
// models/User.ts
import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Please provide a name'],
    maxlength: [60, 'Name cannot be more than 60 characters']
  },
  email: {
    type: String,
    required: [true, 'Please provide an email'],
    unique: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

export default mongoose.models.User || mongoose.model('User', UserSchema);
```

## API Structure

NextJS App Router uses the Route Handlers API:

- Place API endpoints in `app/api/` directory
- Each API route should have a `route.ts` file
- Use proper HTTP methods (GET, POST, PUT, DELETE)
- Implement proper error handling and status codes

Example API route:
```ts
// app/api/users/route.ts
import { NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import User from '@/models/User';

export async function GET() {
  try {
    await dbConnect();
    const users = await User.find({});
    return NextResponse.json({ users }, { status: 200 });
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to fetch users' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    await dbConnect();
    const user = await User.create(body);
    return NextResponse.json({ user }, { status: 201 });
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to create user' },
      { status: 400 }
    );
  }
}
```
